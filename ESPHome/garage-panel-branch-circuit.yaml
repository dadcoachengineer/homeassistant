esphome:
  name: garage-panel-branch-circuit
  platform: ESP32
  board: nodemcu-32s

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password
  id: my_ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$friendly_name Fallback"
    password: !secret failback_password
    
captive_portal:

substitutions:
  friendly_name: Garage Panel
# Change the disp_name to something you want  
  disp_name: garage-panel-branch-circuit
# Interval of how often the power is updated
  update_time: 5s
# Current Transformers:
#  20A/25mA SCT-006: 11143
#  30A/1V SCT-013-030: 8650
#  50A/1V SCT-013-050: 15420
#  80A/26.6mA SCT-010: 41660
#  100A/50ma SCT-013-000: 27518
#  120A/40mA: SCT-016: 41787
#  200A/100mA SCT-024: 27518
  current_cal: '11143'
# Jameco 9VAC Transformer: 
#  For meter versions: 
#  >= v1.3: 7305
  voltage_cal: '7305'
  
spi:
  clk_pin: 18
  miso_pin: 19
  mosi_pin: 23

sensor:

#IC1 Main
  - platform: atm90e32
    cs_pin: 5
    phase_a:
      voltage:
        name: ${disp_name} Volts A Main
        id: ic1Volts
        accuracy_decimals: 1
      current:
        name: ${disp_name} CT1 Amps
        id: ct1Amps
        internal: true
      power:
        name: ${disp_name} CT1 Watts 
        id: ct1Watts
        internal: true
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    phase_b:
      current:
        name: ${disp_name} CT2 Amps 
        id: ct2Amps
        internal: true
      power:
        name: ${disp_name} CT2 Watts 
        id: ct2Watts
        internal: true
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    phase_c:
      current:
        name: ${disp_name} CT3 Amps
        id: ct3Amps
        internal: true
      power:
        name: ${disp_name} CT3 Watts
        id: ct3Watts
        internal: true
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    frequency:
      name: ${disp_name} Freq A Main
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}
#IC2 Main
  - platform: atm90e32
    cs_pin: 4
    phase_a:
      current:
        name: ${disp_name} CT4 Amps 
        id: ct4Amps
      power:
        name: ${disp_name} CT4 Watts 
        id: ct4Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    phase_b:
      current:
        name: ${disp_name} CT5 Amps 
        id: ct5Amps
      power:
        name: ${disp_name} CT5 Watts 
        id: ct5Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 41660
    phase_c:
      current:
        name: ${disp_name} CT6 Amps 
        id: ct6Amps
      power:
        name: ${disp_name} CT6 Watts 
        id: ct6Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 41660
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}
#IC1 AddOn 1
  - platform: atm90e32
    cs_pin: 0
    phase_a:
      current:
        name: ${disp_name} C7 Amps 
        id: ct7Amps
      power:
        name: ${disp_name} CT7 Watts
        id: ct7Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 41660
    phase_b:
      current:
        name: ${disp_name} CT8 Amps 
        id: ct8Amps
      power:
        name: ${disp_name} CT8 Watts
        id: ct8Watts
      gain_voltage: ${voltage_cal}
      gain_ct: 41660
    phase_c:
      current:
        name: ${disp_name} CT9 Amps 
        id: ct9Amps
      power:
        name: ${disp_name} CT9 Watts
        id: ct9Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}
#IC2 AddOn 1
  - platform: atm90e32
    cs_pin: 16
    phase_a:
      current:
        name: ${disp_name} CT10 Amps 
        id: ct10Amps
      power:
        name: ${disp_name} CT10 Watts
        id: ct10Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    phase_b:
      current:
        name: ${disp_name} CT11 Amps 
        id: ct11Amps
      power:
        name: ${disp_name} CT11 Watts
        id: ct11Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    phase_c:
      current:
        name: ${disp_name} CT12 Amps 
        id: ct12Amps
      power:
        name: ${disp_name} CT12 Watts
        id: ct12Watts
      gain_voltage: ${voltage_cal}
      gain_ct: ${current_cal}
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}
    
#Kitchen Refrigerator Total Amps   
  - platform: template
    name: Kitchen Refrigerator Total Amps
    id: KitchenRefrigeratorTotalAmps
    lambda: return id(ct1Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Kitchen Refrigerator Total Watts
  - platform: template
    name: Kitchen Refrigerator Total Watts
    id: KitchenRefrigeratorTotalWatts
    lambda: return id(ct1Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Kitchen Refrigerator kWh
  - platform: total_daily_energy
    name: Kitchen Refrigerator Total kWh
    power_id: KitchenRefrigeratorTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
    
#Garage Refrigerator Total Amps   
  - platform: template
    name: Garage Refrigerator Total Amps
    id: GarageRefrigeratorTotalAmps
    lambda: return id(ct2Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Garage Refrigerator Total Watts
  - platform: template
    name: Garage Refrigerator Total Watts
    id: GarageRefrigeratorTotalWatts
    lambda: return id(ct2Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Garage Refrigerator kWh
  - platform: total_daily_energy
    name: Garage Refrigerator Total kWh
    power_id: GarageRefrigeratorTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
    
#Beverage Refrigerator & Ice Maker Total Amps   
  - platform: template
    name: Beverage Refrigerator & Ice Maker Total Amps
    id: BeverageRefrigeratorTotalAmps
    lambda: return id(ct3Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Beverage Refrigerator & Ice Maker Total Watts
  - platform: template
    name: Beverage Refrigerator & Ice Maker Total Watts
    id: BeverageRefrigeratorTotalWatts
    lambda: return id(ct3Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Beverage Refrigerator & Ice Maker kWh
  - platform: total_daily_energy
    name: Beverage Refrigerator & Ice Maker Total kWh
    power_id: BeverageRefrigeratorTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

#Washer Total Amps   
  - platform: template
    name: Washer Total Amps
    id: WasherTotalAmps
    lambda: return id(ct4Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Washer Total Watts
  - platform: template
    name: Washer Total Watts
    id: WasherTotalWatts
    lambda: return id(ct4Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Washer kWh
  - platform: total_daily_energy
    name: Washer Total kWh
    power_id: WasherTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh


#Dryer Total Amps   
  - platform: template
    name: Dryer Total Amps
    id: DryerTotalAmps
    lambda: return id(ct5Amps).state + id(ct6Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Dryer Total Watts
  - platform: template
    name: Dryer Total Watts
    id: DryerTotalWatts
    lambda: return id(ct5Watts).state + id(ct6Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Dryer kWh
  - platform: total_daily_energy
    name: Dryer Total kWh
    power_id: DryerTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

#Livingroom AC Total Amps   
  - platform: template
    name: Livingroom AC Total Amps
    id: LivingroomACTotalAmps
    lambda: return id(ct7Amps).state + id(ct8Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Livingroom AC Total Watts
  - platform: template
    name: Livingroom AC Total Watts
    id: LivingroomACTotalWatts
    lambda: return id(ct7Watts).state + id(ct8Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Livingroom AC kWh
  - platform: total_daily_energy
    name: Livingroom AC Total kWh
    power_id: LivingroomACTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

#Dishwasher Total Amps   
  - platform: template
    name: Dishwasher Total Amps
    id: DishwasherTotalAmps
    lambda: return id(ct9Amps).state ;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}
#Dishwasher Total Watts
  - platform: template
    name: Dishwasher Total Watts
    id: DishwasherTotalWatts
    lambda: return id(ct9Watts).state ;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}
#Dishwasher kWh
  - platform: total_daily_energy
    name: Dishwasher Total kWh
    power_id: DishwasherTotalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

# Send WiFi signal strength
  - platform: wifi_signal
    name: $friendly_name WiFi Strength
    update_interval: 60s

# Send uptime to HA
  - platform: uptime
    internal: true
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

switch:
  - platform: restart
    name: ${disp_name} Restart  
time:
  - platform: sntp
    id: sntp_time


# Send IP Address to HA
text_sensor:
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address
  - platform: template
    name: $friendly_name Uptime
    id: uptime_human
    icon: mdi:clock-start
